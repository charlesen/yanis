<?php
/*
 * Yanis Framework is Yet ANother Internet Software for web and mobile technologists
 * @copyright Copyright (C) 2012, Charles EDOU NZE & Mobile-tuts!
 * @license Released under the MIT License.
 * @author Charles EDOU NZE <charles at charlesen.fr>
 */

/**
 * Class Page
 *
 */
class Page {
	
	/**
	 * @var Object The Registry object 
	 */
	private $_registry;
	
	/**
	 * @var Object TemplateInfos Class object 
	 */
	private $_tplinfos;
	
	/**
	 * @var Object Config Class object 
	 */
	private $_config;
	
	/**
	 * @var String Current Page Title 
	 */
	private $_title = '';
	
	/**
	 * @var type Array The Page Header
	 */
	private $_header;
	
	/**
	 * @var type Array The Page Header
	 */
	private $_htmlheaders = array ();
	
	/**
	 * @var String Page Footer 
	 */
	private $_footer = '';
	
	/**
	 * @var String Page content 
	 */
	private $_content = '';
	
	/**
	 * @var String 
	 */
	private $_generator = '<!-- Generated by Yanis Framework -->';
	
	/**
	 * @var Array Template tags
	 */
	private $_tags = array ();
	
	/**
	 * @var String 
	 */
	private $_basename = '';
	
	/*
     * @var String The module index.php file
     */
	private $_moduleIndex = 'index.php';
	
	/**
	 * @var static var
	 */
	private static $_instance;
	
	/**
	 * Build the registry object
	 */
	public function __construct() {
		$this->_registry = new Registry ();
		require_once YANIS_PATH . '/config.php';
		$this->_config = new YConfig ();
		require_once TEMPLATE_BASE . '/templateInfos.php';
		$this->_tplinfos = new TemplateInfos ();
		
		$this->setBaseName ();
	}
	
	/**
	 * Get the Page title from Page
	 * @return String 
	 */
	public function getTitle() {
		return $this->_title;
	}
	
	/**
	 * Set the Page title
	 * @param String $title 
	 * @return void
	 */
	public function setTitle($title) {
		$this->_title = $title . '-' . $this->_tplinfos->sitename;
	}
	
	/**
	 * @param Array $new_header 
	 */
	public function setHeader($new_header) {
		$header = array ('title' => $this->getTitle (), 'jquery' => '<script type="text/javascript" src="' . YANIS_PATH . '/libraries/js/jquery.js' . '"></script>', 'jqm' => '<script type="text/javascript" src="' . YANIS_PATH . '/libraries/js/jqm.min.js' . '"></script>', 'modernizr' => '<script type="text/javascript" src="' . YANIS_PATH . '/libraries/js/modernizr.min.js' . '"></script>' );
		array_push ( $header, $this->_tplinfos->metadata );
		
		$this->_htmlheaders = array_push ( $this->getHeaders (), $new_header );
	}
	
	/**
	 * @return Array Page Header 
	 */
	public function getHeaders() {
		return $this->_htmlheaders;
	}
	
	/**
	 * @param String Html Tag
	 * @return Array Page Header 
	 */
	public function getHeadersByKey($tag) {
		return $this->_htmlheaders [$tag];
	}
	
	/**
	 * Set the Page content
	 * @param String $content 
	 * @return void
	 */
	public function setContent($content) {
		$this->_content = $content;
	}
	
	/**
	 * Get the Page content
	 * @return String 
	 */
	public function getContent() {
		return $this->_content;
	}
	
	public function setGenerator() {
		$numargs = func_num_args ();
		// When passing an argument, set a new generator name
		if ($numargs == 1) {
			$this->_generator = func_get_arg ( 0 );
		}
	}
	
	/**
	 * @return String The site generator 
	 */
	public function getGenerator() {
		return $this->_generator;
	}
	
	public function setBaseName() {
		//$this->_basename = 'http://' . $_SERVER['SERVER_NAME'] . '/' . $basename . 'templates/' . $this->_config->templateName . '/';
		$this->_basename = 'http://' . $_SERVER ['SERVER_NAME'] . YANIS_ROOT . DS;
	}
	
	public function getBaseName() {
		return $this->_basename;
	}
	
	/**
	 * Get all Template tags content
	 * @return Array Template Tags
	 */
	public function getTagsArray() {
		return $this->_tags;
	}
	
	/**
	 * Set template tags by including new array of tags in the current (this) array.
	 * @param Array $tagsArray
	 * @return void 
	 */
	public function setTagsArray($tagsArray) {
		array_merge ( $this->_tags, $tagsArray );
	}
	
	/**
	 * Get a specific Template tag content
	 * @return String The Template Tag
	 */
	public function getTag($tagname) {
		return $this->_tags [$tagname];
	}
	
	/**
	 * Add template tags in the Page.
	 * @param type $tagname
	 * @param type $tagcontent
	 * @return void 
	 */
	public function setTag($tagname, $tagcontent) {
		$this->_tags [$tagname] = $tagcontent;
	}
	
	/**
	 * Get the params of the current Page
	 * @param String $param
	 * @return String 
	 */
	public function getParam($param) {
		return (isset ( $_GET [$param] )) ? $_GET [$param] : '';
	}
	
	/**
	 * @param String $param
	 * @return String the url view
	 */
	public function getUrlPath($param) {
		$urlView = '';
		$path = '/';
		if ($param !== '') {
			$path .= 'views/layouts/' . $param . '.php';
		} else {
			$path .= 'index.php';
		}
		// Detect mobile devices
		if ($this->isMobilePage ()) {
			$urlView = TEMPLATE_MOBILE_PATH . $path;
		} else {
			$urlView = TEMPLATE_BASE . '/' . $path;
		}
		
		return $urlView;
	}
	
	/** Put a Javacript file (using absolute path) in the template Page Header
	 * @param type $absoluteScriptPath 
	 */
	public function loadJS($absoluteScriptPath) {
		$js = '<script src="' . $absoluteScriptPath . '"></script>';
		$this->setHeader ( $js );
	}
	
	public function loadHeader($path = '/views/head.php') {
		include_once YANIS_PATH . '/templates/' . $this->_config->templateName . $path;
	}
	
	public function loadFooter($path = '/views/footer.php') {
		include_once YANIS_PATH . '/templates/' . $this->_config->templateName . $path;
	}
	
	/**
	 * load Page content in template component
	 * @param type $indexPage
	 * @param type $defaultPage 
	 */
	public function loadBody($indexPage, $defaultPage) {
		require_once YANIS_PATH . '/libraries/yanis/registry/Authentication.php';
		$auth = & Authentication::getInstance ();
		$pageName = $defaultPage;
		/**
		 * If user is connected, then test if he/she's Welcome OK...
		 */
		if (isset ( $_SESSION ['APP_USER'] ['ID'] )) {
			$pageName = $indexPage;
		}
		
		$path = '/views/layouts/' . $pageName . '.php';
		if ($this->isMobilePage ()) {
			$templateName = 'mobile';
		} else {
			$templateName = $this->_config->templateName;
		}
		include_once YANIS_PATH . '/templates/' . $templateName . $path;
	}
	
	/**
	 * Test if an URL (Page) bit is a template Page or not. So it's may be a module...
	 * @param String $pageName
	 */
	public function isPage($pageName) {
		$pageType = $this->getUrlPath ( $pageName );
		if ($pageType !== '' && file_exists ( $pageType ) == true) {
			return true;
		} else {
			return false;
		}
	}
	
	/**
	 * Test if an URL (Page) is a module/component or not
	 * @param String $moduleName
	 * @return boolean 
	 */
	public function isModule($moduleName) {
		$modulePath = MODULE_FOLDER_PATH . '/yam_' . $moduleName;
		if (file_exists ( $modulePath )) {
			$this->_moduleIndex = $modulePath . '/yam_' . $moduleName . '.php';
			return true;
		} else {
			return false;
		}
	}
	
	/**
	 * Check if we have mobile agent
	 * @return bool
	 */
	public function isMobilePage() {
		require_once YANIS_PATH . '/libraries/yanis/mobile/lib/Mobile_Detect.php';
		$detect = new Mobile_Detect ();
		
		return $detect->isMobile ();
	}
	
	public function getModuleIndex() {
		return $this->_moduleIndex;
	}
	
	public function stuff() {
		echo 'Working Debuger zzzzz...';
	}
	
	public static function &getInstance() {
		$className = __CLASS__;
		if (isset ( self::$_instance ) === false) {
			self::$_instance = new $className ();
		}
		return self::$_instance;
	}
	
	public function __destruct() {
	
	}

}

?>
